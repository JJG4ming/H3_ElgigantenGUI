{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\johan\\\\OneDrive\\\\Documents\\\\GitHub\\\\H3_ElgigantenGUI\\\\src\\\\components\\\\MachinePark\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from \"react-router\";\nimport Machines from \"./Machines.jsx\";\nimport Pumps from \"./Pumps.jsx\";\nimport Modals from \"./Modals.jsx\";\n\nfunction MachinePark({\n  allMachines\n}) {\n  _s();\n\n  const [currentPump, setCurrentPump] = useState({\n    name: \"\",\n    number: \"\",\n    startcode: \"\",\n    stopcode: \"\"\n  });\n  const [currentMachine, setCurrentMachine] = useState({});\n  const [allPumps, setAllPumps] = useState([]);\n\n  const validatePump = (name, number) => {\n    var re = new RegExp(\"[0-9]{8}$\");\n\n    if (number.value.length !== 8) {\n      alert(\"Nummeret skal være 8 cifre langt!\");\n      return;\n    }\n\n    if (re.test(number.value.toString()) === false) {\n      alert(\"Nummeret må kun være tal\");\n      return;\n    } // Variables for name (na), and number (nu)\n    // Checks if name and number already exists\n\n\n    var na = allPumps.some(a => a.name === name.value);\n    var nu = allPumps.some(a => a.number === number.value); // If name or number exists, make an alert with the problem, and return out / stop the function\n\n    if (name.value !== currentPump.name) {\n      if (na === true) {\n        alert(\"Pumpens navn findes allerede\");\n        return;\n      }\n    }\n\n    if (number.value !== currentPump.number) {\n      if (nu === true) {\n        alert(\"Pumpens tlf nummer findes allerede\");\n        return;\n      }\n    }\n\n    return true;\n  };\n\n  useEffect(() => {\n    let mounted = true;\n    fetch(\"http://remote.kkpartner.dk:3001/allpumps\").then(function (data) {\n      return data.json();\n    }).then(function (json) {\n      if (mounted) {\n        setAllPumps(json);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Pumps, {\n      allPumps: allPumps,\n      setCurrentPump: setCurrentPump\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Machines, {\n      allMachines: allMachines,\n      setCurrentMachine: setCurrentMachine\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modals, {\n      currentPump: currentPump,\n      currentMachine: currentMachine,\n      validatePump: validatePump,\n      allMachines: allMachines\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MachinePark, \"1B51vxksdI3DHlhK2w2KwrbZ8bg=\");\n\n_c = MachinePark;\nexport default _c2 = withRouter(MachinePark);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MachinePark\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/johan/OneDrive/Documents/GitHub/H3_ElgigantenGUI/src/components/MachinePark/index.jsx"],"names":["React","useEffect","useState","withRouter","Machines","Pumps","Modals","MachinePark","allMachines","currentPump","setCurrentPump","name","number","startcode","stopcode","currentMachine","setCurrentMachine","allPumps","setAllPumps","validatePump","re","RegExp","value","length","alert","test","toString","na","some","a","nu","mounted","fetch","then","data","json","catch","error","console","log"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport Machines from \"./Machines.jsx\"\r\nimport Pumps from \"./Pumps.jsx\"\r\nimport Modals from \"./Modals.jsx\"\r\n\r\nfunction MachinePark({ allMachines }){\r\n\r\n  const [currentPump, setCurrentPump] = useState({\r\n    name: \"\",\r\n    number: \"\",\r\n    startcode: \"\",\r\n    stopcode: \"\"\r\n  })\r\n  const [currentMachine, setCurrentMachine] = useState({})\r\n  \r\n  const [allPumps, setAllPumps] = useState([])\r\n\r\n  \r\n  const validatePump = (name, number) => {\r\n    var re = new RegExp(\"[0-9]{8}$\")\r\n\r\n    if (number.value.length !== 8) {\r\n      alert(\"Nummeret skal være 8 cifre langt!\")\r\n      return;\r\n    }\r\n    if (re.test(number.value.toString()) === false) {\r\n      alert(\"Nummeret må kun være tal\")\r\n      return;\r\n    }\r\n\r\n    // Variables for name (na), and number (nu)\r\n    // Checks if name and number already exists\r\n    var na = allPumps.some(a => a.name === name.value)\r\n    var nu = allPumps.some(a => a.number === number.value)\r\n\r\n    // If name or number exists, make an alert with the problem, and return out / stop the function\r\n    if (name.value !== currentPump.name){\r\n      if (na === true){\r\n        alert(\"Pumpens navn findes allerede\")\r\n        return;\r\n      }\r\n    }\r\n    \r\n    if (number.value !== currentPump.number){\r\n      if (nu === true){\r\n        alert(\"Pumpens tlf nummer findes allerede\")\r\n        return;\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    fetch(\"http://remote.kkpartner.dk:3001/allpumps\")\r\n      .then(function(data) {\r\n        return data.json();\r\n      })\r\n      .then(function(json) {\r\n        if (mounted) {\r\n\r\n          setAllPumps(json)   \r\n        }  \r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, [])\r\n\r\n  return(\r\n    \r\n    <div>\r\n      <Pumps allPumps={allPumps} setCurrentPump={setCurrentPump}/>\r\n      <Machines allMachines={allMachines} setCurrentMachine={setCurrentMachine}/>    \r\n      \r\n      <Modals currentPump={currentPump} currentMachine={currentMachine} validatePump={validatePump} allMachines={allMachines} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(MachinePark);"]},"metadata":{},"sourceType":"module"}